// <auto-generated />
using System;
using AdminModuleMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdminModuleMVC.Migrations.CourseDb
{
    [DbContext(typeof(CourseDbContext))]
    [Migration("20240610232716_NewCourseMigration")]
    partial class NewCourseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseChatStudent", b =>
                {
                    b.Property<string>("CourseChatsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseChatsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseChatStudent");
                });

            modelBuilder.Entity("CourseChatTeacher", b =>
                {
                    b.Property<string>("CourseChatsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeachersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseChatsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseChatTeacher");
                });

            modelBuilder.Entity("CourseShared.Models.Achivement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ExpThreshold")
                        .HasColumnType("real");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ImageId");

                    b.HasIndex("StudentId");

                    b.ToTable("Achivements");
                });

            modelBuilder.Entity("CourseShared.Models.Answer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestSessionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestSessionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CourseShared.Models.Attendance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("CourseShared.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AutorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AutorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<float?>("Exp")
                        .HasColumnType("real");

                    b.Property<string>("HomeworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCoherent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseImageId");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("TestId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseShared.Models.CourseChat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastInteraction")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("CourseChats");
                });

            modelBuilder.Entity("CourseShared.Models.CourseCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UsesLeft")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseCodes");
                });

            modelBuilder.Entity("CourseShared.Models.CourseFile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ThemeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SectorId");

                    b.HasIndex("ThemeId");

                    b.ToTable("CourseFiles");
                });

            modelBuilder.Entity("CourseShared.Models.CourseStudentExp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Exp")
                        .HasColumnType("real");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudentExps");
                });

            modelBuilder.Entity("CourseShared.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttendanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("CourseId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CourseShared.Models.Homework", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("AllowLateUpload")
                        .HasColumnType("bit");

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Exp")
                        .HasColumnType("real");

                    b.Property<string>("HomeworkFileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkFileId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("CourseShared.Models.HomeworkFile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("HomeworkId");

                    b.ToTable("HomeworkFiles");
                });

            modelBuilder.Entity("CourseShared.Models.HomeworkGrade", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Exp")
                        .HasColumnType("real");

                    b.Property<float>("Grade")
                        .HasColumnType("real");

                    b.Property<string>("HomeworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxGrade")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserFileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserFileId");

                    b.ToTable("HomeworkGrades");
                });

            modelBuilder.Entity("CourseShared.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CourseShared.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AchivementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AchivementId")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("StudentId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CourseShared.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseChatId");

                    b.HasIndex("UserChatId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CourseShared.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReciverEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CourseShared.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CourseShared.Models.Sector", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<float?>("Exp")
                        .HasColumnType("real");

                    b.Property<string>("HomeworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdCourse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("TestId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("CourseShared.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttendanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvatarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("AvatarId");

                    b.HasIndex("EventId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseShared.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvatarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("CourseShared.Models.TeacherPermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CanAddStudents")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditGrades")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageContent")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemoveStudents")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewGrades")
                        .HasColumnType("bit");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherPermissions");
                });

            modelBuilder.Entity("CourseShared.Models.Test", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AttemptsAlowed")
                        .HasColumnType("int");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<float?>("Exp")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("CourseShared.Models.TestAnswer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestInstanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestInstanceId");

                    b.ToTable("TestAnswers");
                });

            modelBuilder.Entity("CourseShared.Models.TestGrade", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<int?>("MaxGrade")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestSessionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestSessionId");

                    b.ToTable("TestGrades");
                });

            modelBuilder.Entity("CourseShared.Models.TestInstance", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("TestInstances");
                });

            modelBuilder.Entity("CourseShared.Models.TestSession", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestSessions");
                });

            modelBuilder.Entity("CourseShared.Models.Theme", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<float?>("Exp")
                        .HasColumnType("real");

                    b.Property<string>("HomeworkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdSection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("SectorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("SectorId");

                    b.HasIndex("TestId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("CourseShared.Models.UserChat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastInteraction")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("UserChats");
                });

            modelBuilder.Entity("CourseShared.Models.UserFile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<string>("CoursesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<string>("CoursesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeachersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoursesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("CourseTeacher");
                });

            modelBuilder.Entity("CourseChatStudent", b =>
                {
                    b.HasOne("CourseShared.Models.CourseChat", null)
                        .WithMany()
                        .HasForeignKey("CourseChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseChatTeacher", b =>
                {
                    b.HasOne("CourseShared.Models.CourseChat", null)
                        .WithMany()
                        .HasForeignKey("CourseChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseShared.Models.Achivement", b =>
                {
                    b.HasOne("CourseShared.Models.Course", "Course")
                        .WithMany("Achivements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("CourseShared.Models.Student", null)
                        .WithMany("Achivements")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CourseShared.Models.Answer", b =>
                {
                    b.HasOne("CourseShared.Models.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.HasOne("CourseShared.Models.TestSession", null)
                        .WithMany("Answers")
                        .HasForeignKey("TestSessionId");
                });

            modelBuilder.Entity("CourseShared.Models.Course", b =>
                {
                    b.HasOne("CourseShared.Models.Image", "CourseImage")
                        .WithMany()
                        .HasForeignKey("CourseImageId");

                    b.HasOne("CourseShared.Models.Homework", "Homework")
                        .WithMany()
                        .HasForeignKey("HomeworkId");

                    b.HasOne("CourseShared.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.Navigation("CourseImage");

                    b.Navigation("Homework");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CourseShared.Models.CourseChat", b =>
                {
                    b.HasOne("CourseShared.Models.Course", null)
                        .WithOne("ChatInstance")
                        .HasForeignKey("CourseShared.Models.CourseChat", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseShared.Models.CourseCode", b =>
                {
                    b.HasOne("CourseShared.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseShared.Models.CourseFile", b =>
                {
                    b.HasOne("CourseShared.Models.Teacher", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("CourseShared.Models.Course", null)
                        .WithMany("CourseFiles")
                        .HasForeignKey("CourseId");

                    b.HasOne("CourseShared.Models.Sector", null)
                        .WithMany("SectionFiles")
                        .HasForeignKey("SectorId");

                    b.HasOne("CourseShared.Models.Theme", null)
                        .WithMany("ThemeFiles")
                        .HasForeignKey("ThemeId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CourseShared.Models.CourseStudentExp", b =>
                {
                    b.HasOne("CourseShared.Models.Course", "Course")
                        .WithMany("CourseStudentExp")
                        .HasForeignKey("CourseId");

                    b.HasOne("CourseShared.Models.Student", "Student")
                        .WithMany("CourseStudentExp")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseShared.Models.Event", b =>
                {
                    b.HasOne("CourseShared.Models.Attendance", null)
                        .WithMany("Events")
                        .HasForeignKey("AttendanceId");

                    b.HasOne("CourseShared.Models.Course", "Course")
                        .WithMany("Events")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseShared.Models.Homework", b =>
                {
                    b.HasOne("CourseShared.Models.CourseFile", "HomeworkFile")
                        .WithMany()
                        .HasForeignKey("HomeworkFileId");

                    b.Navigation("HomeworkFile");
                });

            modelBuilder.Entity("CourseShared.Models.HomeworkFile", b =>
                {
                    b.HasOne("CourseShared.Models.Student", "Author")
                        .WithMany("HomeworkFiles")
                        .HasForeignKey("AutorId");

                    b.HasOne("CourseShared.Models.Homework", "Homework")
                        .WithMany("StudentsFiles")
                        .HasForeignKey("HomeworkId");

                    b.Navigation("Author");

                    b.Navigation("Homework");
                });

            modelBuilder.Entity("CourseShared.Models.HomeworkGrade", b =>
                {
                    b.HasOne("CourseShared.Models.Homework", "Homework")
                        .WithMany()
                        .HasForeignKey("HomeworkId");

                    b.HasOne("CourseShared.Models.Student", null)
                        .WithMany("HomeworkGrades")
                        .HasForeignKey("StudentId");

                    b.HasOne("CourseShared.Models.UserFile", "UserFile")
                        .WithMany()
                        .HasForeignKey("UserFileId");

                    b.Navigation("Homework");

                    b.Navigation("UserFile");
                });

            modelBuilder.Entity("CourseShared.Models.Item", b =>
                {
                    b.HasOne("CourseShared.Models.Achivement", null)
                        .WithOne("Reward")
                        .HasForeignKey("CourseShared.Models.Item", "AchivementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("CourseShared.Models.Student", null)
                        .WithMany("Inventory")
                        .HasForeignKey("StudentId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CourseShared.Models.Message", b =>
                {
                    b.HasOne("CourseShared.Models.CourseChat", null)
                        .WithMany("Messages")
                        .HasForeignKey("CourseChatId");

                    b.HasOne("CourseShared.Models.UserChat", null)
                        .WithMany("Messages")
                        .HasForeignKey("UserChatId");
                });

            modelBuilder.Entity("CourseShared.Models.Notification", b =>
                {
                    b.HasOne("CourseShared.Models.Student", null)
                        .WithMany("Notifications")
                        .HasForeignKey("StudentId");

                    b.HasOne("CourseShared.Models.Teacher", null)
                        .WithMany("Notifications")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("CourseShared.Models.Question", b =>
                {
                    b.HasOne("CourseShared.Models.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("CourseShared.Models.Sector", b =>
                {
                    b.HasOne("CourseShared.Models.Course", null)
                        .WithMany("Sections")
                        .HasForeignKey("CourseId");

                    b.HasOne("CourseShared.Models.Homework", "Homework")
                        .WithMany()
                        .HasForeignKey("HomeworkId");

                    b.HasOne("CourseShared.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.Navigation("Homework");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CourseShared.Models.Student", b =>
                {
                    b.HasOne("CourseShared.Models.Attendance", null)
                        .WithMany("Students")
                        .HasForeignKey("AttendanceId");

                    b.HasOne("CourseShared.Models.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("CourseShared.Models.Event", null)
                        .WithMany("Attendance")
                        .HasForeignKey("EventId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("CourseShared.Models.Teacher", b =>
                {
                    b.HasOne("CourseShared.Models.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("CourseShared.Models.TeacherPermission", b =>
                {
                    b.HasOne("CourseShared.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("CourseShared.Models.TestAnswer", b =>
                {
                    b.HasOne("CourseShared.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.TestInstance", "TestInstance")
                        .WithMany("Answers")
                        .HasForeignKey("TestInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("TestInstance");
                });

            modelBuilder.Entity("CourseShared.Models.TestGrade", b =>
                {
                    b.HasOne("CourseShared.Models.Student", null)
                        .WithMany("TestGrades")
                        .HasForeignKey("StudentId");

                    b.HasOne("CourseShared.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.HasOne("CourseShared.Models.TestSession", "TestSession")
                        .WithMany()
                        .HasForeignKey("TestSessionId");

                    b.Navigation("Test");

                    b.Navigation("TestSession");
                });

            modelBuilder.Entity("CourseShared.Models.TestInstance", b =>
                {
                    b.HasOne("CourseShared.Models.Student", "Student")
                        .WithMany("TestInstances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CourseShared.Models.TestSession", b =>
                {
                    b.HasOne("CourseShared.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CourseShared.Models.Theme", b =>
                {
                    b.HasOne("CourseShared.Models.Homework", "Homework")
                        .WithMany()
                        .HasForeignKey("HomeworkId");

                    b.HasOne("CourseShared.Models.Sector", null)
                        .WithMany("Themes")
                        .HasForeignKey("SectorId");

                    b.HasOne("CourseShared.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.Navigation("Homework");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("CourseShared.Models.UserChat", b =>
                {
                    b.HasOne("CourseShared.Models.Student", null)
                        .WithMany("UserChats")
                        .HasForeignKey("StudentId");

                    b.HasOne("CourseShared.Models.Teacher", null)
                        .WithMany("UserChats")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("CourseShared.Models.UserFile", b =>
                {
                    b.HasOne("CourseShared.Models.Student", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("CourseShared.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("CourseShared.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseShared.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseShared.Models.Achivement", b =>
                {
                    b.Navigation("Reward");
                });

            modelBuilder.Entity("CourseShared.Models.Attendance", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CourseShared.Models.Course", b =>
                {
                    b.Navigation("Achivements");

                    b.Navigation("ChatInstance");

                    b.Navigation("CourseFiles");

                    b.Navigation("CourseStudentExp");

                    b.Navigation("Events");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("CourseShared.Models.CourseChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CourseShared.Models.Event", b =>
                {
                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("CourseShared.Models.Homework", b =>
                {
                    b.Navigation("StudentsFiles");
                });

            modelBuilder.Entity("CourseShared.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CourseShared.Models.Sector", b =>
                {
                    b.Navigation("SectionFiles");

                    b.Navigation("Themes");
                });

            modelBuilder.Entity("CourseShared.Models.Student", b =>
                {
                    b.Navigation("Achivements");

                    b.Navigation("CourseStudentExp");

                    b.Navigation("HomeworkFiles");

                    b.Navigation("HomeworkGrades");

                    b.Navigation("Inventory");

                    b.Navigation("Notifications");

                    b.Navigation("TestGrades");

                    b.Navigation("TestInstances");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("CourseShared.Models.Teacher", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("CourseShared.Models.Test", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("CourseShared.Models.TestInstance", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CourseShared.Models.TestSession", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CourseShared.Models.Theme", b =>
                {
                    b.Navigation("ThemeFiles");
                });

            modelBuilder.Entity("CourseShared.Models.UserChat", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
